'use strict';

var atom$1 = require('atom');
var path = require('path');
var notifier = require('node-notifier');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var notifier__default = /*#__PURE__*/_interopDefaultLegacy(notifier);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

var name = "notify";
var version = "0.0.0";
var description = "Native desktop notifications for Atom";
var main = "./lib/notify";
var scripts = {
	analyze: "source-map-explorer lib/**/*.js",
	"build:code": "rollup --config",
	"build:images": "npm run clean:images && node tools/compose-images.mjs",
	build: "npm-run-all --parallel build:*",
	"clean:code": "rimraf ./lib",
	"clean:images": "rimraf ./images",
	clean: "npm-run-all --parallel clean:*",
	dev: "npm run start",
	"install:theme": "degit --force atom/atom/resources/app-icons#v1.55.0 .app-icons",
	"lint:code": "eslint --ignore-path .gitignore --no-error-on-unmatched-pattern ./src/**/*.ts",
	"lint:styles": "stylelint --allow-empty-input styles/*.{css,less}",
	lint: "npm-run-all --parallel lint:*",
	"postinstall:husky": "husky install",
	"postinstall:images": "npm run build:images",
	postinstall: "npm-run-all --parallel postinstall:*",
	prepublishOnly: "npm run build",
	start: "rollup --watch --config",
	test: "npm run lint",
	theme: "npm-run-all install:theme build:theme"
};
var keywords = [
];
var repository = {
	type: "git",
	url: "https://github.com/idleberg/atom-notify"
};
var homepage = "https://atom.io/packages/notify";
var bugs = {
	url: "https://github.com/idleberg/atom-notify/issues"
};
var license = "MIT";
var engines = {
	atom: ">=1.0.0 <2.0.0"
};
var activationCommands = {
	"atom-workspace": [
		"notify:show-error",
		"notify:show-fatal-error",
		"notify:show-info",
		"notify:show-success",
		"notify:show-warning"
	]
};
var activationHooks = [
	"core:loaded-shell-environment"
];
var providedServices = {
	notify: {
		description: "Opens files/folders in your file manager",
		versions: {
			"1.0.0": "provideNotify"
		}
	}
};
var dependencies = {
	"node-notifier": "^9.0.1"
};
var devDependencies = {
	"@rollup/plugin-babel": "^5.3.0",
	"@rollup/plugin-commonjs": "^18.0.0",
	"@rollup/plugin-json": "^4.1.0",
	"@rollup/plugin-node-resolve": "^11.2.1",
	"@rollup/plugin-typescript": "^8.2.1",
	"@types/atom": "^1.40.10",
	"@types/electron": "^1.6.10",
	"@types/node": "^14.14.37",
	"@typescript-eslint/eslint-plugin": "^4.20.0",
	"@typescript-eslint/parser": "^4.20.0",
	degit: "^2.8.4",
	eslint: "^7.23.0",
	"eslint-plugin-json": "^2.1.2",
	husky: "^6.0.0",
	"lint-staged": "^10.5.4",
	"log-symbols": "^4.1.0",
	"npm-run-all": "^4.1.5",
	rimraf: "^3.0.2",
	rollup: "^2.44.0",
	"rollup-plugin-scss": "^2.6.1",
	"rollup-plugin-terser": "^7.0.2",
	sharp: "^0.28.0",
	"source-map-explorer": "^2.5.2",
	stylelint: "^13.12.0",
	tslib: "^2.1.0",
	typescript: "^4.2.3"
};
var meta = {
	name: name,
	version: version,
	description: description,
	main: main,
	scripts: scripts,
	keywords: keywords,
	repository: repository,
	homepage: homepage,
	bugs: bugs,
	license: license,
	engines: engines,
	activationCommands: activationCommands,
	activationHooks: activationHooks,
	providedServices: providedServices,
	dependencies: dependencies,
	devDependencies: devDependencies,
	"lint-staged": {
	"*.ts": "eslint --cache --fix"
}
};

var configSchema = {
  showWhenFocused: {
    title: 'Show when focused',
    description: "Shows desktop notifications when the editor has focus",
    type: 'boolean',
    "default": false,
    order: 1
  },
  iconTheme: {
    title: 'Icon Theme',
    description: 'Choose an icon theme for your notifications',
    type: 'string',
    "enum": [// {
    //   value: 'appIconWithBadge',
    //   description: 'App Icon with Badge'
    // },
    {
      value: 'badge',
      description: 'Badge'
    }],
    "default": 'appIconWithBadge',
    order: 3
  },
  overrides: {
    title: 'Overrides',
    description: 'The following settings only take effect when Atom runs in developer mode',
    type: 'object',
    order: 4,
    properties: {
      sound: {
        title: 'Sound',
        type: 'string',
        "enum": [{
          value: 'default',
          description: '(default)'
        }, {
          value: 'always',
          description: 'Always play sound'
        }, {
          value: 'never',
          description: 'Never play sound'
        }],
        "default": 'default',
        order: 1
      },
      icon: {
        title: 'Icon',
        type: 'string',
        "enum": [{
          value: 'default',
          description: '(default)'
        }, {
          value: 'always',
          description: 'Always show icon'
        }, {
          value: 'never',
          description: 'Never show icon'
        }],
        "default": 'default',
        order: 2
      }
    }
  },
  developer: {
    title: 'Developer',
    description: 'The following settings only take effect when Atom runs in developer mode.',
    type: 'object',
    order: 5,
    properties: {
      enableCommands: {
        title: 'Enable Commands',
        description: 'Exposes a number of demo commands to Atom',
        "default": true,
        order: 1
      },
      exposeToWindow: {
        title: 'Expose to Window object ',
        description: 'Allows running `notify` methods directly from the console. Requires a restart to take effect.',
        type: 'boolean',
        "default": true,
        order: 2
      }
    }
  }
};
function getConfig(key) {
  if (key === void 0) {
    key = '';
  }

  return (key === null || key === void 0 ? void 0 : key.length) ? atom.config.get(meta.name + "." + key) : atom.config.get("" + meta.name);
}

function getContentImage(type) {
  var iconTheme = getConfig().iconTheme;

  switch (iconTheme) {
    case 'appIconWithBadge':
      return path.join(__dirname, '..', "/images/atom-" + atom.getReleaseChannel() + "-" + type + ".png");

    case 'badge':
      return path.join(__dirname, '..', "/images/badge-" + type + ".png");

    default:
      throw Error("Unsupported icon theme: " + iconTheme);
  }
}

function handleIconOverride(icon) {
  var overrideSound = getConfig('overrides.icon');
  var defaultIcon = path.join(__dirname, '..', "/images/atom-" + atom.getReleaseChannel() + ".png");

  switch (overrideSound) {
    case 'never':
      return undefined;

    case 'always':
      return icon || defaultIcon;
  }
}

function handleSoundOverride(playSound) {
  var overrideSound = getConfig('overrides.sound');

  switch (overrideSound) {
    case 'never':
      return false;

    case 'always':
      return true;

    default:
      return playSound;
  }
}

function mapNotificationType(type) {
  type = type.toLowerCase();

  switch (type) {
    case 'fatal':
    case 'fatalerror':
      return 'fatalError';

    case 'warning':
      return 'warn';

    default:
      return type;
  }
}

var notify = {
  __notify__: function (type, notification) {
    notification = typeof notification === 'string' ? {
      message: notification
    } : notification;

    var params = __assign(__assign({}, notification), {
      sender: 'com.github.atom',
      appID: 'com.squirrel.atom.atom',
      icon: handleIconOverride(notification.icon),
      contentImage: getContentImage(type),
      sound: handleSoundOverride(notification.sound)
    });

    notifier__default['default'].notify(params);
  },
  error: function (notification) {
    this.__notify__('error', notification);
  },
  fatalError: function (notification) {
    this.__notify__('fatal', notification);
  },
  info: function (notification) {
    this.__notify__('info', notification);
  },
  success: function (notification) {
    this.__notify__('success', notification);
  },
  warn: function (notification) {
    this.__notify__('warning', notification);
  }
};

var index = {
  config: configSchema,
  contentImage: null,
  icon: null,
  showWhenFocused: false,
  subscriptions: new atom$1.CompositeDisposable(),
  activate: function () {
    return __awaiter(this, void 0, void 0, function () {

      var _this = this;

      return __generator(this, function (_a) {
        if (atom.inDevMode()) console.log('[notify] Activating package');
        getConfig('hideInEditor');
        atom.config.observe(meta.name + ".hideInEditor", function (currentValue) {
        });
        this.showWhenFocused = getConfig('showWhenFocused');
        atom.config.observe(meta.name + ".showWhenFocused", function (currentValue) {
          _this.showWhenFocused = currentValue;
        });
        this.subscriptions.add(atom.notifications.onDidAddNotification(function (Notification) {
          if (_this.showWhenFocused || document.body.classList.contains('is-blurred')) {
            if (Notification) return _this.intercept(Notification);
          }
        }));

        if (atom.inDevMode()) {
          if (getConfig('developer.enableCommands')) {
            this.subscriptions.add(atom.commands.add('atom-workspace', {
              'notify:show-error': function () {
                return _this.notify({
                  title: 'Error',
                  message: 'This is a demo message',
                  type: 'error'
                });
              }
            }), atom.commands.add('atom-workspace', {
              'notify:show-fatal-error': function () {
                return _this.notify({
                  title: 'Fatal Error',
                  message: 'This is a demo message',
                  type: 'fatalError'
                });
              }
            }), atom.commands.add('atom-workspace', {
              'notify:show-info': function () {
                return _this.notify({
                  title: 'Info',
                  message: 'This is a demo message',
                  type: 'info'
                });
              }
            }), atom.commands.add('atom-workspace', {
              'notify:show-success': function () {
                return _this.notify({
                  title: 'Success',
                  message: 'This is a demo message',
                  type: 'success'
                });
              }
            }), atom.commands.add('atom-workspace', {
              'notify:show-warning': function () {
                return _this.notify({
                  title: 'Warning',
                  message: 'This is a demo message',
                  type: 'warn'
                });
              }
            }));
          }

          if (getConfig('developer.exposeToWindow')) {
            window['notify'] = notify;
          }
        }

        return [2
        /*return*/
        ];
      });
    });
  },
  intercept: function (notification) {
    var type = mapNotificationType(notification.getType().toLowerCase());
    var title = notification.getMessage();
    var message = notification.getDetail();
    var dismissable = notification.getOptions().dismissable;
    var params = {
      type: type,
      title: title,
      message: message,
      wait: dismissable,
      timeout: dismissable ? undefined : atom.config.get('notifications.defaultTimeout')
    };
    this.notify(params);
  },
  notify: function (notifyOptions) {
    var params = __assign(__assign({}, notifyOptions), {
      sender: 'com.github.atom',
      appID: 'com.squirrel.atom.atom'
    });

    notify[notifyOptions.type](params);
  },
  deactivate: function () {
    var _a;

    if (atom.inDevMode()) console.log('[notify] Deactivating package');
    (_a = this.subscriptions) === null || _a === void 0 ? void 0 : _a.dispose();
  },
  provideNotify: function () {
    if (atom.inDevMode()) console.log('[notify] Providing service');
    return this.notify;
  }
};

module.exports = index;
//# sourceMappingURL=notify.map
